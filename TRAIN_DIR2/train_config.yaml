controller_cfg:
  rollout_type: wrapper
  schedule_cfg: null
controller_type: random_sample

dataset_type: kitti
dataset_cfg:
    class_names: ['Car', 'Pedestrian', 'Cyclist']
    cfg:
        DATA_PATH: '/data/duxuan/data/kitti/detection'
        POINT_CLOUD_RANGE: [0, -39.68, -3, 69.12, 39.68, 1]
        DATA_PROCESSOR:
            - NAME: mask_points_and_boxes_outside_range
              REMOVE_OUTSIDE_BOXES: True

            - NAME: shuffle_points
              SHUFFLE_ENABLED: {
                'train': True,
                'test': False
              }

            - NAME: transform_points_to_voxels
              VOXEL_SIZE: [0.16, 0.16, 4]
              MAX_POINTS_PER_VOXEL: 32
              MAX_NUMBER_OF_VOXELS: {
                'train': 16000,
                'test': 40000
              }
            - NAME: transform_voxels_for_pointpillars
              WITH_DISTANCE: False
              USE_ABSLOTE_XYZ: True
              USE_NORM: True
              MAX_NUMBER_OF_VOXELS: 16000
              ALIGN: True

        DATA_AUGMENTOR:
            DISABLE_AUG_LIST: ['placeholder']
            AUG_CONFIG_LIST:
                - NAME: gt_sampling
                  USE_ROAD_PLANE: False
                  DB_INFO_PATH:
                      - kitti_dbinfos_train.pkl
                  PREPARE: {
                    filter_by_min_points: ['Car:5', 'Pedestrian:5', 'Cyclist:5'],
                    filter_by_difficulty: [-1],
                  }

                  SAMPLE_GROUPS: ['Car:15','Pedestrian:15', 'Cyclist:15']
                  NUM_POINT_FEATURES: 4
                  DATABASE_WITH_FAKELIDAR: False
                  REMOVE_EXTRA_WIDTH: [0.0, 0.0, 0.0]
                  LIMIT_WHOLE_SCENE: False

                - NAME: random_world_flip
                  ALONG_AXIS_LIST: ['x']

                - NAME: random_world_rotation
                  WORLD_ROT_ANGLE: [-0.78539816, 0.78539816]

                - NAME: random_world_scaling
                  WORLD_SCALE_RANGE: [0.95, 1.05]
        
        POINT_FEATURE_ENCODING: {
        encoding_type: absolute_coordinates_encoding,
        used_feature_list: ['x', 'y', 'z', 'intensity'],
        src_feature_list: ['x', 'y', 'z', 'intensity'],
        }

        DATA_SPLIT: {
        'train': train,
        'test': val
        }

        INFO_PATH: {
            'train': [kitti_infos_train.pkl],
            'test': [kitti_infos_val.pkl],
        }

        GET_ITEM_LIST: ["points"]
        FOV_POINTS_ONLY: True



objective_type: mmdetection_head
objective_cfg:
  # Schedulable attributes:
  num_classes: 80
  metrics_type: coco
  metrics_cfg:
      remove_invalid_labels: true #!
      has_background: false
  head_type: ATSSHead
  head_cfg:
      num_classes: 80
      in_channels: 64
      stacked_convs: 3
      feat_channels: 64
      norm_cfg:
          type: BN
          requires_grad: true
      anchor_generator:
          type: AnchorGenerator
          ratios: [1.0]
          octave_base_scale: 5
          scales_per_octave: 1
          strides: [8, 16, 32, 64, 128]
      bbox_coder:
          type: DeltaXYWHBBoxCoder
          target_means: [.0, .0, .0, .0]
          target_stds: [0.1, 0.1, 0.2, 0.2]
      loss_cls:
          type: FocalLoss
          use_sigmoid: True
          gamma: 2.0
          alpha: 0.25
          loss_weight: 1.0
      loss_bbox:
          type: GIoULoss
          loss_weight: 2.0
      loss_centerness:
          type: CrossEntropyLoss
          use_sigmoid: True
          loss_weight: 1.0
      train_cfg:
        assigner:
          type: ATSSAssigner
          topk: 9
        allowed_border: -1
        smoothl1_beta: 1.
        pos_weight: -1
        debug: false
      test_cfg:
          nms_pre: 1000
          min_bbox_size: 0
          nms:
              type: nms
              iou_threshold: 0.6
          min_bbox_size: 0
          score_thr: 0.05
          max_per_img: 100

rollout_type: wrapper
search_space_cfg:
    backbone_search_space_type: germ
    backbone_search_space_cfg: {}
    backbone_rollout_type: germ
    neck_search_space_type: germ
    neck_search_space_cfg: {}
    neck_rollout_type: germ
search_space_type: germ_wrapper


final_model_cfg:

  genotypes: 
      - OrderedDict([('backbone.first_block.out_channels.1', 0.5), ('backbone.cells.0.0.out_channels.1', 0.5), ('backbone.cells.0.0.kernel_size', 7), ('backbone.cells.0.0.exp_ratio', 6), ('backbone.cells.0.0.stride', 2), ('backbone.cells.0.1.kernel_size', 7), ('backbone.cells.0.1.exp_ratio', 6), ('backbone.cells.0.1.stride', 1), ('backbone.cells.0.2.kernel_size', 7), ('backbone.cells.0.2.exp_ratio', 6), ('backbone.cells.0.2.stride', 1), ('backbone.cells.0.3.kernel_size', 7), ('backbone.cells.0.3.exp_ratio', 6), ('backbone.cells.0.3.stride', 1), ('backbone.cells.1.0.out_channels.1', 0.5), ('backbone.cells.1.0.kernel_size', 7), ('backbone.cells.1.0.exp_ratio', 6), ('backbone.cells.1.0.stride', 2), ('backbone.cells.1.1.kernel_size', 7), ('backbone.cells.1.1.exp_ratio', 6), ('backbone.cells.1.1.stride', 1), ('backbone.cells.1.2.kernel_size', 7), ('backbone.cells.1.2.exp_ratio', 6), ('backbone.cells.1.2.stride', 1), ('backbone.cells.1.3.kernel_size', 7), ('backbone.cells.1.3.exp_ratio', 6), ('backbone.cells.1.3.stride', 1), ('backbone.cells.2.0.out_channels.1', 0.5), ('backbone.cells.2.0.kernel_size', 7), ('backbone.cells.2.0.exp_ratio', 6), ('backbone.cells.2.0.stride', 2), ('backbone.cells.2.1.kernel_size', 7), ('backbone.cells.2.1.exp_ratio', 6), ('backbone.cells.2.1.stride', 1), ('backbone.cells.2.2.kernel_size', 7), ('backbone.cells.2.2.exp_ratio', 6), ('backbone.cells.2.2.stride', 1), ('backbone.cells.2.3.kernel_size', 7), ('backbone.cells.2.3.exp_ratio', 6), ('backbone.cells.2.3.stride', 1), ('backbone.cells.3.0.out_channels.1', 0.5), ('backbone.cells.3.0.kernel_size', 7), ('backbone.cells.3.0.exp_ratio', 6), ('backbone.cells.3.0.stride', 1), ('backbone.cells.3.1.kernel_size', 7), ('backbone.cells.3.1.exp_ratio', 6), ('backbone.cells.3.1.stride', 1), ('backbone.cells.3.2.kernel_size', 7), ('backbone.cells.3.2.exp_ratio', 6), ('backbone.cells.3.2.stride', 1), ('backbone.cells.3.3.kernel_size', 7), ('backbone.cells.3.3.exp_ratio', 6), ('backbone.cells.3.3.stride', 1), ('backbone.cells.4.0.out_channels.1', 0.5), ('backbone.cells.4.0.kernel_size', 7), ('backbone.cells.4.0.exp_ratio', 6), ('backbone.cells.4.0.stride', 2), ('backbone.cells.4.1.kernel_size', 7), ('backbone.cells.4.1.exp_ratio', 6), ('backbone.cells.4.1.stride', 1), ('backbone.cells.4.2.kernel_size', 7), ('backbone.cells.4.2.exp_ratio', 6), ('backbone.cells.4.2.stride', 1), ('backbone.cells.4.3.kernel_size', 7), ('backbone.cells.4.3.exp_ratio', 6), ('backbone.cells.4.3.stride', 1), ('backbone.cells.5.0.out_channels.1', 0.5), ('backbone.cells.5.0.kernel_size', 7), ('backbone.cells.5.0.exp_ratio', 6), ('backbone.cells.5.0.stride', 1), ('backbone.depth_decs.0', 4), ('backbone.depth_decs.1', 4), ('backbone.depth_decs.2', 4), ('backbone.depth_decs.3', 4), ('backbone.depth_decs.4', 4)])
      - OrderedDict([('backbone.cells.1.0.out_channels.1', 0.5), ('backbone.cells.3.0.out_channels.1', 0.5), ('backbone.cells.5.0.out_channels.1', 0.5), ('fpn_convs.0.kernel_size', 3), ('fpn_convs.1.kernel_size', 3), ('fpn_convs.2.kernel_size', 3), ('fpn_convs.3.kernel_size', 3), ('fpn_convs.4.kernel_size', 3)]) 
  backbone_type: germ
  backbone_cfg:
    germ_supernet_type: mbv2 
    germ_supernet_cfg:
        pretrained_path: pretrained_weights/_mbv2_backbone_0.5_germ.pth 
        #depth_choices: [4]
        depth_choices: [2, 3, 4]
        strides: [2, 2, 2, 1, 2, 1]
        #mult_ratio_choices: [0.35, 0.5]
        mult_ratio_choices: [0.35, 0.5]
        channels: [32, 16, 24, 40, 80, 96, 192, 320, 1280]
        #kernel_sizes: [7]
        kernel_sizes: [3, 5, 7]
        #expansion_choices: [6]
        expansion_choices: [2, 3, 4, 6]
        stem_stride: 2
        first_stride: 1
        activation: relu6
  neck_type: fpn_germ
  neck_cfg:
    out_channels: 64
    pyramid_layers: 5
    kernel_sizes: [3]
  head_type: atss
  head_cfg:
    num_classes: 80
    num_anchors: 1
    stacked_convs: 3
    has_background: false
    #activation: relu6
  feature_levels: [3, 4, 5]
  rollout_type: wrapper
final_model_type: wrapper_final_model

# final_trainer_type: wrapper_final_trainer
# final_trainer_cfg:
#   batch_size: 12 #!
#   eval_batch_size: 48 #!
#   epochs: 96 #!
#   optimizer_scheduler:
#     type: MultiStepLR
#     milestones: [16, 22]
#     gamma: 0.1
#   schedule_cfg: null
#   warmup_steps: 500
#   warmup_ratio: 0.001
#   eval_every: 1
#   workers_per_queue: 2
#   weight_decay: 0.0001
#   learning_rate: 0.2
#   save_as_state_dict: true
final_trainer_type: cnn_trainer
final_trainer_cfg:
  batch_size: 256
  epochs: 10
  optimizer_scheduler:
    eta_min: 0.0001
    T_max: 30
    type: CosineAnnealingLR
  schedule_cfg: null
  weight_decay: 0.00004
  learning_rate: 0.005
  save_as_state_dict: true